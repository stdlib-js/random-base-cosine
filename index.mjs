import e from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-nonenumerable-read-only-property@esm/index.mjs";import t from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-nonenumerable-read-only-accessor@esm/index.mjs";import n from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-nonenumerable-read-write-accessor@esm/index.mjs";import s from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-plain-object@esm/index.mjs";import r from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-function@esm/index.mjs";import i from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-has-own-property@esm/index.mjs";import o from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-constant-function@esm/index.mjs";import m from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-noop@esm/index.mjs";import d from"https://cdn.jsdelivr.net/gh/stdlib-js/random-base-mt19937@esm/index.mjs";import a from"https://cdn.jsdelivr.net/gh/stdlib-js/math-base-assert-is-nan@esm/index.mjs";import l from"https://cdn.jsdelivr.net/gh/stdlib-js/array-to-json@esm/index.mjs";import p from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-number@esm/index.mjs";import u from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-positive-number@esm/index.mjs";import h from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-nan@esm/index.mjs";import j from"https://cdn.jsdelivr.net/gh/stdlib-js/stats-base-dists-cosine-quantile@esm/index.mjs";var f=p.isPrimitive,g=u.isPrimitive,c=h;var b=function(e,t){return!f(e)||c(e)?new TypeError("invalid argument. `mu` must be a number primitive and not `NaN`. Value: `"+e+"`."):g(t)?null:new TypeError("invalid argument. `s` must be a positive number. Value: `"+t+"`.")},v=j;var y=function(e,t,n){return v(e(),t,n)},x=e,w=t,N=n,L=s,E=r,O=i,T=o,P=m,V=d.factory,G=a,R=l,A=b,J=y;var M=function(){var e,t,n,s,r,i;if(0===arguments.length)t=V();else if(1===arguments.length){if(!L(e=arguments[0]))throw new TypeError("invalid argument. Options argument must be an object. Value: `"+e+"`.");if(O(e,"prng")){if(!E(e.prng))throw new TypeError("invalid option. `prng` option must be a pseudorandom number generator function. Option: `"+e.prng+"`.");t=e.prng}else t=V(e)}else{if(s=A(r=arguments[0],i=arguments[1]))throw s;if(arguments.length>2){if(!L(e=arguments[2]))throw new TypeError("invalid argument. Options argument must be an object. Value: `"+e+"`.");if(O(e,"prng")){if(!E(e.prng))throw new TypeError("invalid option. `prng` option must be a pseudorandom number generator function. Option: `"+e.prng+"`.");t=e.prng}else t=V(e)}else t=V()}return x(n=void 0===r?j:h,"NAME","cosine"),e&&e.prng?(x(n,"seed",null),x(n,"seedLength",null),N(n,"state",T(null),P),x(n,"stateLength",null),x(n,"byteLength",null),x(n,"toJSON",T(null)),x(n,"PRNG",t)):(w(n,"seed",o),w(n,"seedLength",m),N(n,"state",l,p),w(n,"stateLength",d),w(n,"byteLength",a),x(n,"toJSON",u),x(n,"PRNG",t),t=t.normalized),n;function o(){return t.seed}function m(){return t.seedLength}function d(){return t.stateLength}function a(){return t.byteLength}function l(){return t.state}function p(e){t.state=e}function u(){var e={type:"PRNG"};return e.name=n.NAME,e.state=R(t.state),e.params=void 0===r?[]:[r,i],e}function h(){return J(t,r,i)}function j(e,n){return G(e)||G(n)||n<=0?NaN:J(t,e,n)}},S=M();e(S,"factory",M);var q=S;export{q as default};
